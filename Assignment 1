#include <stdio.h>
#include <cuda_runtime.h>


__global__ void matrixElementwiseMultiply(int *matrix, int *vector, int rows, int cols) {
    
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    
    
    if (row < rows && col < cols) {
        
        int idx = row * cols + col;
        
        
        matrix[idx] = matrix[idx] * vector[col];
    }
}

int main() {
    
    const int rows = 10;
    const int cols = 10;
    
    
    int h_matrix[rows][cols];
    int h_vector[cols];
    
    
    printf("Initial vector V:\n");
    for (int j = 0; j < cols; j++) {
        h_vector[j] = j + 1;
        printf("%d ", h_vector[j]);
    }
    printf("\n\n");
    
    
    printf("Initial matrix M:\n");
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            h_matrix[i][j] = j + 1;
            printf("%d ", h_matrix[i][j]);
        }
        printf("\n");
    }
    printf("\n");
    
    
    int *d_matrix, *d_vector;
    cudaMalloc((void**)&d_matrix, rows * cols * sizeof(int));
    cudaMalloc((void**)&d_vector, cols * sizeof(int));
    
    
    cudaMemcpy(d_matrix, h_matrix, rows * cols * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_vector, h_vector, cols * sizeof(int), cudaMemcpyHostToDevice);
    
    dim3 blockDim(5, 5);
    dim3 gridDim((cols + blockDim.x - 1) / blockDim.x, 
                 (rows + blockDim.y - 1) / blockDim.y); 
    
    matrixElementwiseMultiply<<<gridDim, blockDim>>>(d_matrix, d_vector, rows, cols);
    
    
    cudaError_t cudaStatus = cudaGetLastError();
    if (cudaStatus != cudaSuccess) {
        fprintf(stderr, "Kernel launch failed: %s\n", cudaGetErrorString(cudaStatus));
        return 1;
    }
    
    
    cudaMemcpy(h_matrix, d_matrix, rows * cols * sizeof(int), cudaMemcpyDeviceToHost);
    
    
    printf("Modified matrix M after element-wise multiplication:\n");
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("%d ", h_matrix[i][j]);
        }
        printf("\n");
    }
    printf("\n");
    
    
    printf("Verification of results:\n");
    bool correct = true;
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            
            int expected = (j + 1) * (j + 1);
            if (h_matrix[i][j] != expected) {
                printf("Error at position [%d][%d]: Expected %d, got %d\n", i, j, expected, h_matrix[i][j]);
                correct = false;
            }
        }
    }
    
    if (correct) {
        printf("All calculations are correct!\n");
        printf("Each matrix element Mij = (j+1)^2\n");
    }
    
    
    cudaFree(d_matrix);
    cudaFree(d_vector);
    
    return 0;
}

}
